{"version":3,"sources":["tmdb.js","components/MovieRow/index.jsx","components/FeaturedMovie/index.jsx","components/Header/index.jsx","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","NavigateBefore","style","fontSize","NavigateNext","listw","results","length","marginLeft","width","map","item","key","src","poster_path","alt","console","log","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","vote_average","getFullYear","number_of_seasons","href","id","join","black","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fb68061.chunk.js","sourcesContent":["const API_KEY = \"d8eb3e767c0f059f7ee88261c82180d1\";\r\nconst BASE_URL = \"https://api.themoviedb.org/3\";\r\n\r\n/*\r\n *ORIGINAIS DA NETFLIX\r\n *DESTAQUES DA NETFLIX (TRENDING)\r\n *EM ALTA DA NETFLIX ( TOP RATED)\r\n *ACAO\r\n *COMEDIA\r\n *TERROR\r\n *ROMANCE\r\n *DOCUMENTARIOS\r\n */\r\n\r\nconst basicFetch = async (endpoint) => {\r\n  const req = await fetch(`${BASE_URL}${endpoint}`);\r\n  const json = await req.json();\r\n  return json;\r\n};\r\n\r\nexport default {\r\n  getHomeList: async () => {\r\n    return [\r\n      {\r\n        slug: \"originals\",\r\n        title: \" Originais do Netflix\",\r\n        items: await basicFetch(\r\n          `/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"trending\",\r\n        title: \"Recomendados\",\r\n        items: await basicFetch(\r\n          `/trending/all/week?language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"top-rated\",\r\n        title: \"Em Alta\",\r\n        items: await basicFetch(\r\n          `/movie/top_rated?language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"action\",\r\n        title: \"Ação\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"comedy\",\r\n        title: \"Comédia\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"horror\",\r\n        title: \"Terror\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"romance\",\r\n        title: \"Romance\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n      {\r\n        slug: \"documentary\",\r\n        title: \"Documentário\",\r\n        items: await basicFetch(\r\n          `/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`\r\n        ),\r\n      },\r\n    ];\r\n  },\r\n\r\n  getMovieInfo: async (movieId, type) => {\r\n    let info = {};\r\n    if (movieId) {\r\n      switch (type) {\r\n        case \"movie\":\r\n          info = await basicFetch(\r\n            `/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`\r\n          );\r\n          break;\r\n          break;\r\n        case \"tv\":\r\n          info = await basicFetch(\r\n            `/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`\r\n          );\r\n          break;\r\n        default:\r\n          info=null\r\n          break;\r\n      }\r\n      return info;\r\n    }\r\n  },\r\n};\r\n","import React,{useState} from \"react\";\r\nimport \"./MovieRow.css\";\r\nimport { NavigateBefore , NavigateNext } from '@material-ui/icons';\r\n\r\nexport default ({ title, items }) => {\r\n  const [scrollX, setScrollX] = useState(-1040);\r\n  \r\n  \r\n  const handleLeftArrow = () => {\r\n    let x = scrollX + Math.round(window.innerWidth / 2);\r\n    if(x > 0){\r\n      x = 0;\r\n    }\r\n    setScrollX(x);\r\n  };\r\n  const handleRightArrow = () => {\r\n    let x = scrollX - Math.round(window.innerWidth / 2);\r\n    let listw = items.results.length * 208;\r\n    if((window.innerWidth - listw) > x){\r\n      x =( window.innerWidth - listw) - 60;\r\n    }\r\n    setScrollX(x);\r\n  };\r\n\r\n  return (\r\n    <div className='movieRow'>\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"movieRow--before\" onClick={handleLeftArrow}>\r\n        < NavigateBefore style={{fontSize: 50}}/>\r\n      </div>\r\n      <div className=\"movieRow--next\">\r\n        <NavigateNext style={{fontSize: 50}}onClick={handleRightArrow}/>\r\n      </div>\r\n      <div className=\"movieRow--listarea\">\r\n        <div className=\"movieRow--list\" style={{\r\n            marginLeft: scrollX,\r\n            width: items.results.length * 208\r\n\r\n          }}>\r\n          {items.results.length > 0 && //verifica se tem algum filme na lista\r\n            items.results.map((item, key) => ( //se tiver filme, entao cria um map para cada filme\r\n              <div key={key} className=\"movieRow--item\">\r\n                <img\r\n                  src={`https://image.tmdb.org/t/p/w300${item.poster_path}`}//tras a imagem do filme\r\n                  alt={item.title}//caso nao suba o filme vem o title do filme\r\n                />\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./FeaturedMovie.css\";\r\n\r\nexport default ({ item }) => {\r\n  console.log(item);\r\n  let firstDate = new Date(item.first_air_date);\r\n\r\n  let genres =[];\r\n\r\n  for (let i in item.genres) {\r\n    genres.push(item.genres[i].name);\r\n  }\r\n\r\n\r\n  let description = item.overview;\r\n\r\n  if (description.length > 200) {\r\n    description = description.substring(0, 200) + \"...\";\r\n  }\r\n\r\n  return (\r\n    <section\r\n      className=\"featured\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        backgroundImage: `url(https://image.tmdb.org/t/p/original/${item.backdrop_path})`,\r\n      }}\r\n    >\r\n      <div className=\"featured--vertical\">{/*somente cria a sombra vertical */}\r\n\r\n        <div className=\"featured--horizontal\">\r\n          <div className=\"featured--name\">{item.name}</div>\r\n          {/*pega o nome */}\r\n          <div className=\"featured--info\">\r\n            <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n            {/*pega a pontuacao */}\r\n            <div className=\"featured-year\">{firstDate.getFullYear()}</div>\r\n            {/*pega o ano */}\r\n            <div className=\"featured--seasons\">\r\n              {item.number_of_seasons} temporada{/*pega nº temporadas */}\r\n              {item.number_of_seasons === 1 ? \"\" : \"s\"}{\" \"}\r\n              {/*verifica se tem 1 ou + temporadas para colocar o S */}\r\n            </div>\r\n\r\n            <div className=\"featured--description\">{description}</div>\r\n            {/*pega a descricao */}\r\n\r\n            <div className=\"featured--buttons\">\r\n                <a className='featured--watchButton' href={`/watch/${item.id}`}> ► Assistir </a>\r\n                <a className='featured--myListButton'href={`/list/add/${item.id}`}> + Minha lista </a>\r\n            </div>\r\n            {/*botoes de assistir, adicionar, favoritos */}\r\n\r\n            <div className=\"featured--genres\"><strong>Generos: </strong>{genres.join(', ')}</div>\r\n            {/*pega os generos */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport './Header.css';\r\n\r\nexport default ({black}) =>{\r\n\r\n\r\n\r\n  return(\r\n    <header className={black ? 'black': ''}>\r\n      <div className='header--logo'>\r\n        <a href=\"/\">\r\n          <img src=\"https://image.tmdb.org/t/p/original/wwemzKWzjKYJFfCeiB57q3r4Bcm.svg\" alt=\"logo\"/>\r\n        </a>\r\n      </div>\r\n\r\n      <div className=\"header--user\">\r\n       \r\n        <a href=\"/\">\r\n          <img src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\" alt=\"user\"/>\r\n        </a>\r\n\r\n      </div>\r\n    </header>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport tmdb from \"./tmdb\";\n\nimport MovieRow from \"./components/MovieRow/\";\nimport FeaturedMovie from \"./components/FeaturedMovie/\";\nimport Header from \"./components/Header/\";\n\nexport default () => {\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  //Pega os dados dos filmes\n  useEffect(() => {\n    const loadAll = async () => {\n      //pegando a lista total\n      let list = await tmdb.getHomeList();\n      setMovieList(list);\n\n      //pegando o filme em destaque\n      let originals = list.filter((i) => i.slug === \"originals\"); //filtrando pelo slug \"originals\"\n      let randomChosen = Math.floor(\n        Math.random() * (originals[0].items.results.length - 1)\n      ); //pega um numero aleatorio entre 0 e o tamanho do array\n      let chosen = originals[0].items.results[randomChosen]; //pega o filme escolhido\n\n      let chosenInfo = await tmdb.getMovieInfo(chosen.id, \"tv\"); //pega as informações do filme/serie\n\n      setFeaturedData(chosenInfo);\n    };\n    loadAll();\n  }, []);\n\n  //observa o scroll do navegador e atualiza o estado do header\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 50) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    };\n    window.addEventListener(\"scroll\", scrollListener);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollListener);\n    };\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <Header black={blackHeader} />\n\n      {/*pega o filme em destaque */}\n      {featuredData && <FeaturedMovie item={featuredData} />}\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} /> //tras os filmes baseado no titulo e no ITEMS dentro do tmdb.js\n        ))}\n      </section>\n\n      <footer>\n        Feito por{\" \"}\n        <a href=\"https://rxrichard.github.io/\" target=\"_blank\">\n          <strong>Richard Bastos</strong>\n        </a><br/>\n        Direitos de imagem para{\" \"}\n        <a href=\"https://www.netflix.com/\" target=\"_blank\">\n          <strong>Netflix</strong>\n        </a><br/>\n        Dados pegos do site{\" \"}\n        <a href=\"https://www.themoviedb.org/\" target=\"_blank\">\n          <strong>The Movie DB</strong>\n        </a>\n      </footer>\n      \n      {/*SISTEMA DE CARGA DO LOADING */}\n      {movieList.length === 0 && <div className='loading'>\n          <img src='https://media.filmelier.com/noticias/br/2020/03/Netflix_LoadTime.gif' alt='Carregando'/>\n      </div>}\n\n      \n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}